generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String
  about        String
  age          Int
  avatar       String
  expectations String
  joinDate     DateTime     @default(now())
  linkedin     String
  userCourse   UserCourse[]
  userPath     UserPath[]
}

model Admin {
  id     String   @id @default(cuid())
  email  String   @unique
  course Course[]
  path   Path[]
}

model UserPath {
  id                  String @id @default(cuid())
  numCoursesCompleted Int
  status              String
  userId              String
  pathId              String
  path                Path   @relation(fields: [pathId], references: [id])
  user                User   @relation(fields: [userId], references: [id])
}

model Path {
  id         String       @id @default(cuid())
  name       String       @unique
  numCourses Int
  adminId    String
  admin      Admin        @relation(fields: [adminId], references: [id])
  coursePath CoursePath[]
  userPath   UserPath[]
}

model CoursePath {
  id       String @id @default(cuid())
  numOrder Int
  pathId   String
  courseId String
  course   Course @relation(fields: [courseId], references: [id])
  path     Path   @relation(fields: [pathId], references: [id])
}

model UserCourse {
  id              String   @id @default(cuid())
  status          String
  inscriptionDate DateTime @default(now())
  finishDate      DateTime
  courseId        String
  userId          String
  Course          Course   @relation(fields: [courseId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model Course {
  id             String          @id @default(cuid())
  title          String
  description    String
  adminId        String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  admin          Admin           @relation(fields: [adminId], references: [id])
  courseContents CourseContent[]
  coursePath     CoursePath[]
  userCourse     UserCourse[]
}

model CourseContent {
  id          String @id @default(cuid())
  name        String
  description String
  courseId    String
  contentType String
  url         String
  Course      Course @relation(fields: [courseId], references: [id])
}
